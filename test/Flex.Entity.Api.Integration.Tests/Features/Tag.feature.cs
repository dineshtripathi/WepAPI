// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Flex.Entity.Api.Integration.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Tags")]
    public partial class TagsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Tag.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tags", "\tIn order to manage Tag value in flex\r\n\tAs a OE user\r\n\tI want to be able to creat" +
                    "e, update and delete tag type value for a selected entity", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T01 Update Entity Tag Values - create an new entity tag value")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T01UpdateEntityTagValues_CreateAnNewEntityTagValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T01 Update Entity Tag Values - create an new entity tag value", new string[] {
                        "PAT"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags/temp"});
            table1.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 13
 testRunner.Given("a request to update an entity tag temp value", ((string)(null)), table1, "Given ");
#line 17
 testRunner.When("the client makes a  PUT request with the body \'{ value : \"32\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the Api returns with response code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And("the response value contains \'32\', key should be \'temp\'  and update_at should be c" +
                    "orrect date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T02 Update Entity Tag Values - update an new entity tag value")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T02UpdateEntityTagValues_UpdateAnNewEntityTagValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T02 Update Entity Tag Values - update an new entity tag value", new string[] {
                        "PAT"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags/temp"});
            table2.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 23
 testRunner.Given("a request to update an entity tag temp value", ((string)(null)), table2, "Given ");
#line 27
 testRunner.When("the client makes a  PUT request with the body \'{ value : \"33\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
 testRunner.And("the response contains sucess \'true\' with error message \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T03 GET Entity Tags all Values")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T03GETEntityTagsAllValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T03 GET Entity Tags all Values", new string[] {
                        "PAT"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table3.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags"});
            table3.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 33
 testRunner.Given("a request for all tag types", ((string)(null)), table3, "Given ");
#line 37
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.And("the response contains a collection of entity OE tag values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T04 GET Entity Tags Value")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T04GETEntityTagsValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T04 GET Entity Tags Value", new string[] {
                        "PAT"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table4.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags"});
            table4.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 43
 testRunner.Given("a request for an entity tag value with \'temp\'", ((string)(null)), table4, "Given ");
#line 47
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And("the response contains the requrested entity tag details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T05 Delete Entity Tag Value - temp")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T05DeleteEntityTagValue_Temp()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T05 Delete Entity Tag Value - temp", new string[] {
                        "PAT"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table5.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags/"});
            table5.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 53
 testRunner.Given("a request to delete an entity value with tag key \'temp\'", ((string)(null)), table5, "Given ");
#line 57
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.And("the response contains sucess \'true\' with error message \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T06 Delete Entity Tag Value - which is not exist")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T06DeleteEntityTagValue_WhichIsNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T06 Delete Entity Tag Value - which is not exist", new string[] {
                        "PAT"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table6.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags/"});
            table6.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 63
 testRunner.Given("a request to delete an entity value with tag key \'X\'", ((string)(null)), table6, "Given ");
#line 67
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("the Api returns with response code \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
 testRunner.And("the response contains sucess \'false\' with error message \'tag key = X not found.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T07 Update Entity Tag Values - create an new entity tag value with null")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T07UpdateEntityTagValues_CreateAnNewEntityTagValueWithNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T07 Update Entity Tag Values - create an new entity tag value with null", new string[] {
                        "PAT"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table7.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags/temperature"});
            table7.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 73
 testRunner.Given("a request to update an entity tag temp value", ((string)(null)), table7, "Given ");
#line 77
 testRunner.When("the client makes a  PUT request with the body \'{ value : null}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("the Api returns with response code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.And("the response value contains \'null\', key should be \'temperature\'  and update_at sh" +
                    "ould be correct date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T08 Update Entity Tag Values - update an entity tag having null value with not nu" +
            "ll value")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T08UpdateEntityTagValues_UpdateAnEntityTagHavingNullValueWithNotNullValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T08 Update Entity Tag Values - update an entity tag having null value with not nu" +
                    "ll value", new string[] {
                        "PAT"});
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table8.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags/temperature"});
            table8.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 83
 testRunner.Given("a request to update an entity tag temp value", ((string)(null)), table8, "Given ");
#line 87
 testRunner.When("the client makes a  PUT request with the body \'{ value : \"35\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.And("the response contains sucess \'true\' with error message \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("T09 Delete Entity Tag Value - temperature")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void T09DeleteEntityTagValue_Temperature()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("T09 Delete Entity Tag Value - temperature", new string[] {
                        "PAT"});
#line 92
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table9.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/OE1/tags/"});
            table9.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 93
 testRunner.Given("a request to delete an entity value with tag key \'temperature\'", ((string)(null)), table9, "Given ");
#line 97
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.And("the response contains sucess \'true\' with error message \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
