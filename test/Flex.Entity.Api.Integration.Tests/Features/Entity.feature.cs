// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Flex.Entity.Api.Integration.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Entity")]
    public partial class EntityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Entity.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Entity", "\tIn order to manage entities in flex\r\n\tAs an OE user\r\n\tI want to be be able to cr" +
                    "eate, delete and view entities types.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E01 Create Entity - Create a new entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E01CreateEntity_CreateANewEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E01 Create Entity - Create a new entity", new string[] {
                        "PAT"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table1.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 14
 testRunner.Given("a request to create a new entity with entity type \'Client\'", ((string)(null)), table1, "Given ");
#line 18
 testRunner.When("the client makes a POST request with the body \'{ name : \"Sainsbury\", typePrefix :" +
                    " \"c\", service_parent : null, asset_parent : \"OE1\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("the Api returns with response code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.And("the response contains the newly created entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E02 Create Entity - Create a new entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E02CreateEntity_CreateANewEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E02 Create Entity - Create a new entity", new string[] {
                        "PAT"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table2.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 24
 testRunner.Given("a request to create a new entity with entity type \'Client\'", ((string)(null)), table2, "Given ");
#line 28
 testRunner.When("the client makes a POST request with the body \'{ name : \"Tesco\", typePrefix : \"c\"" +
                    ", service_parent : null, asset_parent : \"OE1\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the Api returns with response code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.And("the response contains the newly created entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E03 Create Entity - Create a new descendant entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E03CreateEntity_CreateANewDescendantEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E03 Create Entity - Create a new descendant entity", new string[] {
                        "PAT"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table3.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table3.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 34
 testRunner.Given("a request to create a new entity with entity type \'Site\'", ((string)(null)), table3, "Given ");
#line 38
 testRunner.When("the client makes a POST request with the body \'{ name : \"Northcheam\", typePrefix " +
                    ": \"s\", service_parent : null, asset_parent : \"c1\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the Api returns with response code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.And("the response contains the newly created entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E04 Create Entity - Create a new service entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E04CreateEntity_CreateANewServiceEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E04 Create Entity - Create a new service entity", new string[] {
                        "PAT"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table4.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table4.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 44
 testRunner.Given("a request to create a new entity with entity type \'Grid\'", ((string)(null)), table4, "Given ");
#line 48
 testRunner.When("the client makes a POST request with the body \'{ name : \"National Grid\", typePref" +
                    "ix : \"g\", service_parent : \"OE1\", asset_parent : null}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("the Api returns with response code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.And("the response contains the newly created entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E05 Create Entity - Fail to create a new entity")]
        [NUnit.Framework.CategoryAttribute("NAT")]
        public virtual void E05CreateEntity_FailToCreateANewEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E05 Create Entity - Fail to create a new entity", new string[] {
                        "NAT"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table5.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table5.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 54
 testRunner.Given("a request to create a new entity with entity type \'Site\'", ((string)(null)), table5, "Given ");
#line 58
 testRunner.When("the client makes a POST request with the body \'{ name : \"Northcheam\", typePrefix " +
                    ": \"s\", service_parent : \"c1\", asset_parent : null}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("the Api returns with response code \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
 testRunner.And("the response contains the creation failure error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E06 Update Entity - Update an existing entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E06UpdateEntity_UpdateAnExistingEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E06 Update Entity - Update an existing entity", new string[] {
                        "PAT"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table6.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table6.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 64
 testRunner.Given("a request to update an entity with an entity code \'g1\'", ((string)(null)), table6, "Given ");
#line 68
 testRunner.When("the client makes a PATCH request with the body \'{ name : \"National Grid 2\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.And("the response contains the update success message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E07 Update Entity - Reparent an existing entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E07UpdateEntity_ReparentAnExistingEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E07 Update Entity - Reparent an existing entity", new string[] {
                        "PAT"});
#line 73
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table7.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table7.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 74
 testRunner.Given("a request to update an entity with an entity code \'s1\'", ((string)(null)), table7, "Given ");
#line 78
 testRunner.When("the client makes a PATCH request with the body \'{ asset_parent : \"c2\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 80
 testRunner.And("the response contains the update success message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E08 Update Entity - Fail to reparent an existing entity")]
        [NUnit.Framework.CategoryAttribute("NAT")]
        public virtual void E08UpdateEntity_FailToReparentAnExistingEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E08 Update Entity - Fail to reparent an existing entity", new string[] {
                        "NAT"});
#line 83
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table8.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table8.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 84
 testRunner.Given("a request to update an entity with an entity code \'s1\'", ((string)(null)), table8, "Given ");
#line 88
 testRunner.When("the client makes a PATCH request with the body \'{ service_parent : \"g1\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("the Api returns with response code \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.And("the response contains the update failure error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E09 Update Entity - Fail to update a non existing entity")]
        [NUnit.Framework.CategoryAttribute("NAT")]
        public virtual void E09UpdateEntity_FailToUpdateANonExistingEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E09 Update Entity - Fail to update a non existing entity", new string[] {
                        "NAT"});
#line 93
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table9.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table9.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 94
 testRunner.Given("a request to update an entity with an entity code \'s12323\'", ((string)(null)), table9, "Given ");
#line 98
 testRunner.When("the client makes a PATCH request with the body \'{ service_parent : \"g1\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("the Api returns with response code \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.And("the response contains the update failure error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E10 Get Entity - Get entity by its code")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E10GetEntity_GetEntityByItsCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E10 Get Entity - Get entity by its code", new string[] {
                        "PAT"});
#line 104
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table10.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table10.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 105
 testRunner.Given("a request to get an entity with an entity code \'g2\'", ((string)(null)), table10, "Given ");
#line 109
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.And("the get response contains the entity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E11 Get Entity - Get entity by its code at a point in time")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E11GetEntity_GetEntityByItsCodeAtAPointInTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E11 Get Entity - Get entity by its code at a point in time", new string[] {
                        "PAT"});
#line 114
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table11.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table11.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 115
 testRunner.Given("a request to get an entity with an entity code \'g2\'", ((string)(null)), table11, "Given ");
#line 119
 testRunner.And("at a point in time \'?at={now}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.And("the get response contains the entity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E12 Get Entity - Get entity children by its code")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E12GetEntity_GetEntityChildrenByItsCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E12 Get Entity - Get entity children by its code", new string[] {
                        "PAT"});
#line 125
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table12.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table12.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 126
 testRunner.Given("a request to get an entity with an entity code \'oe1\'", ((string)(null)), table12, "Given ");
#line 130
 testRunner.And("a command to retrieve its children \'children/asset\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
 testRunner.And("the get response contains the entity details and a collection of child entities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E14 Get Entity - Get entities by search filter option name")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E14GetEntity_GetEntitiesBySearchFilterOptionName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E14 Get Entity - Get entities by search filter option name", new string[] {
                        "PAT"});
#line 137
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table13.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table13.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 138
 testRunner.Given("a request to get entities filtered by \'?name=Northcheam\'", ((string)(null)), table13, "Given ");
#line 142
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E15 Get Entity - Get entities by search filter option top")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E15GetEntity_GetEntitiesBySearchFilterOptionTop()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E15 Get Entity - Get entities by search filter option top", new string[] {
                        "PAT"});
#line 147
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table14.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table14.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 148
 testRunner.Given("a request to get entities filtered by \'?top=10\'", ((string)(null)), table14, "Given ");
#line 152
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 154
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E16 Get Entity - Get entities by search filter option skip")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E16GetEntity_GetEntitiesBySearchFilterOptionSkip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E16 Get Entity - Get entities by search filter option skip", new string[] {
                        "PAT"});
#line 157
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table15.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table15.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 158
 testRunner.Given("a request to get entities filtered by \'?skip=2\'", ((string)(null)), table15, "Given ");
#line 162
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 164
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E17 Get Entity - Get entities by search filter option service_descendant")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E17GetEntity_GetEntitiesBySearchFilterOptionService_Descendant()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E17 Get Entity - Get entities by search filter option service_descendant", new string[] {
                        "PAT"});
#line 167
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table16.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table16.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 168
 testRunner.Given("a request to get entities filtered by \'?service_descendant=g1\'", ((string)(null)), table16, "Given ");
#line 172
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 174
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E18 Get Entity - Get entities by search filter option asset_descendant")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E18GetEntity_GetEntitiesBySearchFilterOptionAsset_Descendant()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E18 Get Entity - Get entities by search filter option asset_descendant", new string[] {
                        "PAT"});
#line 177
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table17.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table17.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 178
 testRunner.Given("a request to get entities filtered by \'?asset_descendant=c1\'", ((string)(null)), table17, "Given ");
#line 182
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 183
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 184
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E19 Get Entity - Get entities by search filter option service_child")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E19GetEntity_GetEntitiesBySearchFilterOptionService_Child()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E19 Get Entity - Get entities by search filter option service_child", new string[] {
                        "PAT"});
#line 187
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table18.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table18.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 188
 testRunner.Given("a request to get entities filtered by \'?service_child=g1\'", ((string)(null)), table18, "Given ");
#line 192
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E20 Get Entity - Get entities by search filter option asset_child")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E20GetEntity_GetEntitiesBySearchFilterOptionAsset_Child()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E20 Get Entity - Get entities by search filter option asset_child", new string[] {
                        "PAT"});
#line 197
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table19.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table19.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 198
 testRunner.Given("a request to get entities filtered by \'?asset_child=c1\'", ((string)(null)), table19, "Given ");
#line 202
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 203
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E21 Get Entity - Get entities by search filter option has_tag")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E21GetEntity_GetEntitiesBySearchFilterOptionHas_Tag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E21 Get Entity - Get entities by search filter option has_tag", new string[] {
                        "PAT"});
#line 207
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table20.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table20.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 208
 testRunner.Given("a request to get entities filtered by \'?has_tag=dummy\'", ((string)(null)), table20, "Given ");
#line 212
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 213
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 214
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E22 Get Entity - Get entities by search filter option matches_tag")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E22GetEntity_GetEntitiesBySearchFilterOptionMatches_Tag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E22 Get Entity - Get entities by search filter option matches_tag", new string[] {
                        "PAT"});
#line 217
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table21.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table21.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 218
 testRunner.Given("a request to get entities filtered by \'?matches_tag=dummy:32\'", ((string)(null)), table21, "Given ");
#line 222
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 224
 testRunner.And("the get response contains a collection of entities match the filter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E30 Delete Entity - Delete a leaf entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E30DeleteEntity_DeleteALeafEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E30 Delete Entity - Delete a leaf entity", new string[] {
                        "PAT"});
#line 227
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table22.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table22.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 228
 testRunner.Given("a request to delete an entity with an entity code \'g2\'", ((string)(null)), table22, "Given ");
#line 232
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 233
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 234
 testRunner.And("the response is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E31 Delete Entity - Delete a non-leaf entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E31DeleteEntity_DeleteANon_LeafEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E31 Delete Entity - Delete a non-leaf entity", new string[] {
                        "PAT"});
#line 237
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table23.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table23.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 238
 testRunner.Given("a request to delete an entity with an entity code \'c3\'", ((string)(null)), table23, "Given ");
#line 242
 testRunner.And("a flag indicating to delete all descendants \'?delete_all_descendants=true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 244
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 245
 testRunner.And("the response is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E32 Delete Entity - Delete a non-leaf entity")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void E32DeleteEntity_DeleteANon_LeafEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E32 Delete Entity - Delete a non-leaf entity", new string[] {
                        "PAT"});
#line 248
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table24.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table24.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 249
 testRunner.Given("a request to delete an entity with an entity code \'c4\'", ((string)(null)), table24, "Given ");
#line 253
 testRunner.And("a flag indicating to delete all descendants \'?delete_all_descendants=true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 255
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 256
 testRunner.And("the response is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E33 Delete Entity - Fail to delete a non existing entity")]
        [NUnit.Framework.CategoryAttribute("NAT")]
        public virtual void E33DeleteEntity_FailToDeleteANonExistingEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E33 Delete Entity - Fail to delete a non existing entity", new string[] {
                        "NAT"});
#line 259
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table25.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities"});
            table25.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 260
 testRunner.Given("a request to delete an entity with an entity code \'c123432\'", ((string)(null)), table25, "Given ");
#line 264
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 265
 testRunner.Then("the Api returns with response code \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 266
 testRunner.And("the response is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
