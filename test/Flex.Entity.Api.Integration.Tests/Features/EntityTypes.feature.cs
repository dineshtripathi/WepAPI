// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Flex.Entity.Api.Integration.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EntityTypes")]
    public partial class EntityTypesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EntityTypes.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EntityTypes", "\tIn order to manage entitytypes in flex\r\n\tAs an OE user\r\n\tI want to be be able to" +
                    " create, delete and view entity types.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET1 GET Entity Types - Get entity type collections")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void ET1GETEntityTypes_GetEntityTypeCollections()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET1 GET Entity Types - Get entity type collections", new string[] {
                        "PAT"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table1.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 13
 testRunner.Given("a request for all entity types", ((string)(null)), table1, "Given ");
#line 17
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And("the response contains a collection of entity type details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET2 GET Entity Types - Get entity type")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void ET2GETEntityTypes_GetEntityType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET2 GET Entity Types - Get entity type", new string[] {
                        "PAT"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table2.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 24
 testRunner.Given("a request for an entity types with prefix \'C\'", ((string)(null)), table2, "Given ");
#line 28
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.And("the response contains entity type details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET3 GET Entity Types - entity type not found")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void ET3GETEntityTypes_EntityTypeNotFound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET3 GET Entity Types - entity type not found", new string[] {
                        "PAT"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table3.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table3.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 34
 testRunner.Given("a request for an entity types with prefix \'Z\'", ((string)(null)), table3, "Given ");
#line 38
 testRunner.When("the client makes a GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the Api returns with response code \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.And("the response contains error details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET4 Create Entity Type - create new Entity Type")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        [NUnit.Framework.CategoryAttribute("EntityType")]
        public virtual void ET4CreateEntityType_CreateNewEntityType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET4 Create Entity Type - create new Entity Type", new string[] {
                        "PAT",
                        "EntityType"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table4.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table4.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 45
 testRunner.Given("a request to create a new entity type with prefix \'X\'", ((string)(null)), table4, "Given ");
#line 49
 testRunner.When("the client makes a POST request with the body \'{ prefix : \"X\", name : \"Xtreem Ent" +
                    "ity\", allow_in_asset_hierarchy : true, allow_in_service_hierarchy : false, allow" +
                    "_same_type_descendant : false}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("the Api returns with response code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.And("the response contains the newly created entity type details.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET5 Create Entity Type - create invalid Entity Type")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        [NUnit.Framework.CategoryAttribute("EntityType")]
        public virtual void ET5CreateEntityType_CreateInvalidEntityType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET5 Create Entity Type - create invalid Entity Type", new string[] {
                        "PAT",
                        "EntityType"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table5.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table5.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 56
 testRunner.Given("a request to create a new entity type with prefix \'X\'", ((string)(null)), table5, "Given ");
#line 60
 testRunner.When("the client makes a POST request with the body \'{ prefix : \"X\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("the Api returns with response code \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.And("the response contains the error details for the BadRequest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET6 Delete Entity Type - delete entity type")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void ET6DeleteEntityType_DeleteEntityType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET6 Delete Entity Type - delete entity type", new string[] {
                        "PAT"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table6.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table6.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 65
 testRunner.Given("a request to delete an entity types with prefix \'X\'", ((string)(null)), table6, "Given ");
#line 69
 testRunner.When("the client makes a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("the response is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET7 Get Entity Type - get entity type without authorization")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void ET7GetEntityType_GetEntityTypeWithoutAuthorization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET7 Get Entity Type - get entity type without authorization", new string[] {
                        "PAT"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table7.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table7.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 75
 testRunner.Given("a request for an entity types with prefix \'C\'", ((string)(null)), table7, "Given ");
#line 79
 testRunner.When("the client makes a GET request without a bearer token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("the Api returns with response code \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
 testRunner.And("the response contains an error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET8 Get Entity Type - get entity type without emailId in the bearer token")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void ET8GetEntityType_GetEntityTypeWithoutEmailIdInTheBearerToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET8 Get Entity Type - get entity type without emailId in the bearer token", new string[] {
                        "PAT"});
#line 84
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table8.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table8.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 85
 testRunner.Given("a request for an entity types with prefix \'C\'", ((string)(null)), table8, "Given ");
#line 89
 testRunner.When("the Client makes a Get request with a bearer token having no emailid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
 testRunner.Then("the Api returns with response code \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.And("the response contains an error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ET9 Get Entity Type : get entity type without permission present in token")]
        [NUnit.Framework.CategoryAttribute("PAT")]
        public virtual void ET9GetEntityTypeGetEntityTypeWithoutPermissionPresentInToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ET9 Get Entity Type : get entity type without permission present in token", new string[] {
                        "PAT"});
#line 94
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table9.AddRow(new string[] {
                        "RelativeUrl",
                        "/entities/types"});
            table9.AddRow(new string[] {
                        "Accept",
                        "application/json;"});
#line 95
 testRunner.Given("a request for an entity types with prefix \'C\'", ((string)(null)), table9, "Given ");
#line 99
 testRunner.When("the Client makes a Get request with a bearer token having no permission", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("the Api returns with response code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.And("the response contains entity type details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
